# This workflow build and push a Docker container to Google Artifact Registry and deploy it on Cloud Run when a commit is pushed to the $default-branch branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build a docker container
# 4. Publish it to Google Artifact Registry
# 5. Deploy it to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Cloud Storage
#      roles/storage.admin   (if using Google Container Registry (gcr) instead)
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for the GAR_LOCATION, SERVICE and REGION environment variables (below).
#
# NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
#   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles
#   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry
#   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - $default-branch

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # NOTE: Alternative option - authentication via credentials json
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}'
          token_format: 'access_token'

      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

      # NOTE: Alternative option - authentication via credentials json
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          registry: us-west1-docker.pkg.dev
          username: _json_key
        password: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}

      - name: Build and Push Container
        run: |-
          docker build -t "us-west1-docker.pkg.dev/ncaambb-443717/cloud-run-source-deploy/ncaa-predict/ncaa-predict:46df0c71094feb8e7003678e189343351734f37c" ./
          docker push "us-west1-docker.pkg.dev/ncaambb-443717/cloud-run-source-deploy/ncaa-predict/ncaa-predict:46df0c71094feb8e7003678e189343351734f37c"

      # END - Docker auth and build

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          # service: ${{ env.SERVICE }}
          # region: ${{ env.REGION }}
          # NOTE: If using a pre-built image, update the image name here
          image:  "us-west1-docker.pkg.dev/ncaambb-443717/cloud-run-source-deploy/ncaa-predict/ncaa-predict:46df0c71094feb8e7003678e189343351734f37c"
          # NOTE: You can also set env variables here:
          #  env_vars: |
          #  NODE_ENV=production
          #  TOKEN_EXPIRE=6400

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}







# name: Deploy to Cloud Run

# on:
#   push:
#     branches:
#       - main

# jobs:
#   deploy:
#     name: Build and Deploy to Cloud Run
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3

#     - name: Set up Google Cloud SDK
#       uses: google-github-actions/setup-gcloud@v1
#       with:
#         version: '424.0.0'
#         service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
#         project_id: ncaambb-443717
        
#     - name: Docker Auth
#       id: docker-auth
#       uses: 'docker/login-action@v1'
#       with:
#         registry: us-west1-docker.pkg.dev
#         username: _json_key
#         password: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON  }}
      
#     - name: Configure Docker authentication
#       run: gcloud auth configure-docker us-west1-docker.pkg.dev


#     - name: Build and push Docker image
#       run: |
#         IMAGE_NAME="us-west1-docker.pkg.dev/ncaambb-443717/cloud-run-source-deploy/ncaa-predict/ncaa-predict:46df0c71094feb8e7003678e189343351734f37c"
#         docker build -t $IMAGE_NAME .
#         docker push $IMAGE_NAME

#     - name: Deploy to Cloud Run
#       run: |
#         IMAGE_NAME="us-west1-docker.pkg.dev/ncaambb-443717/cloud-run-source-deploy/ncaa-predict/ncaa-predict:46df0c71094feb8e7003678e189343351734f37c"
#         gcloud run deploy ncaambb-app \
#           --image $IMAGE_NAME \
#           --platform managed \
#           --region us-west1 \
#           --allow-unauthenticated \
#           --service-account cloud-run-sa@ncaambb-443717.iam.gserviceaccount.com
